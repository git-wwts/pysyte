#! /usr/bin/env python

"""Search & replace text

Usage: %(prog)s searches [paths]

Searches ("fred" is a regular expression):

    /fred        show all freds in text
    /fred/       show only lines with fred
    /fred/.../c  find fred and replace with ... (confirming each)
    =fred        remove all lines with fred
    =fred=c      remove all lines with fred (confirming each)

"""

import doctest
import os
import re
import sys

from pysyte import __version__
from pysyte.cli.functions import parser
from pysyte.cli.main import run


def add_args(parser_):
    p = parser(parser_)
    p.positional('searches', help='What to search for')
    p.positional('files', help='files to show (or "-" for stdin)')
    p.boolean('-o', '--no', help='never confirm')
    p.boolean('-y', '--yes', help='always confirm')
    p.lines()
    p.version()
    return p


def match_show(string, separator='/'):
    regexp = re.compile(f'''
        [{separator}]
        (
            (?P<old>[^{separator}]+)
            (
                [{separator}]
                (?P<new>[^{separator}]+)
                (
                    [{separator}]
                    (
                        (?P<qualifiers>[gc]+)
                        |
                        (?P<rest>[^{separator}]+)
                    )
                )?
            )?
        )
    ''', re.VERBOSE)
    match = regexp.match(string)
    if not match:
        return {}
    result = match.groupdict()
    result['separator'] = separator
    return result


def match_remove(string, separator='='):
    regexp = re.compile(f'''
        [{separator}]
        (?P<old>[^{separator}]+)?
    ''', re.VERBOSE)
    match = regexp.match(string)
    if not match:
        return {}
    return match.groupdict()


def post_parse(args):
    matchers = (match_show, match_remove)
    matches = [m(c) for m in matchers for c in args.searches]
    args.actions = [m for m in matches if m]
    return args

def main(args):
    for action in args.actions:
        new = action.get('new', '')
        old = action.get('old', '')
        qualifiers = action.get('qualifiers', '')
        rest = action.get('rest', '')
        separator = action.get('separator', '')
        if separator == '/':
            if new:
                print(f'Substitute {new} for {old}')
            else:
                print(f'Find {old}')
        else:
            print(f'Remove old')


run(main, add_args, post_parse)
