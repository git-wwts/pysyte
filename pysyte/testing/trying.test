The trying module
=================

    >>> from trying import main
    >>> assert 'running of doctests' in main.__doc__

Imports for tests
-----------------

    >>> import os
    >>> import sys
    >>> import getpass
    >>> from pysyte.types import paths

Trying trying
-------------

Following tests will only work when run under trying itself
    because, e.g. it provides a global called test
    >>> try:
    ...     assert test
    ... except NameError:
    ...     raise KeyboardInterrupt

Running tests with try provides an instance called test
    which has some interesting attributes
    e.g. this file is called try.tests
    >>> assert test.path.name == 'trying.test'

If that went well we have a hidden variable called test
    which is an object from the __main__ module
    and has some attributes

    >>> assert test.here == os.getcwd()

We also have access to some modules I often use
    without a need for explicit import
    Which ignores the heuristic that
        "Explicit is better than implicit"
    >>> assert test.path.name == paths.path(sys.argv[0]).name

And we can run bash commands
    >>> assert bash('/bin/ls /bin/ls')
    /bin/ls

    >>> assert test.home == paths.path('~')

We know the user who is running the tests
    >>> assert test.user == '%s@%s' % (getpass.getuser(), test.host)

Edge cases
----------

    >>> assert not bash('/bin/ls /no_such_file')
    FAIL: ...No such file or directory

    >>> show(os)
    Help on module os:
    ...

    >>> show(0)
    0
